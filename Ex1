from machine import Pin, PWM # Импорт из библиотеки машин пинку и пвм
from time import sleep # Импорт слип из тайм
import machine # импорт библ машин
import time # импорт библиотеки тайм

class HCSR04:
    def __init__(self, trigger_pin, echo_pin, echo_timeout_us): #объявление конструктора класса
        self.echo_timeout_us = echo_timeout_us 
        self.trigger = Pin(trigger_pin, mode=Pin.OUT, pull=None) #выход
        self.trigger.value(0) #значение 0(не работай, жди команды)
        self.echo = Pin(echo_pin, mode=Pin.IN, pull=None) #вход
        self.led = PWM(Pin(26), 5000) #для ШИМа объяснить с какого дать и сколько частоты моргания)
        self.led.duty(0) #выключи лампу и подготовь к дальнейшей работе

    def _send_pulse_and_wait(self): #пни и жди
        self.trigger.value(0)  # Stabilize the sensor
        time.sleep_us(5) # подождать 5 мсек
        self.trigger.value(1) # перевод датчика в рабочее состояние
        time.sleep_us(10) # работать 10 мсек
        self.trigger.value(0) # перевод в состояние спокойствия
        try: # обработчик ошибок
            pulse_time = machine.time_pulse_us(self.echo, 1, self.echo_timeout_us) #время работы узнаем
            return pulse_time # возращаем резульатыт пни и жди
        except OSError as ex: # если возникла ошибка
            if ex.args[0] == 110:  # 110 = истекло время подключения
                raise OSError('ETIMEDOUT: Connection timed out') # печатаем об этом
            raise ex 

    def distance_cm(self): # высчитываем растояние в см
        pulse_time = self._send_pulse_and_wait() # вызываем функцию пни и жди для объекта данного класса
        cms = (pulse_time / 2) / 29.1 # нахождение скорости
        if cms < 10.0:  # если растояние меньше 10 см
            self.led.duty(1023)  # включаем лампочку
        else:  # иначе
            self.led.duty(0) #
        return cms 


esp32 = HCSR04(trigger_pin=13, echo_pin=12, echo_timeout_us=10000) #

while True: #бесконечный цикл
    distance = esp32.distance_cm() #растояние
    print('Distance:', distance, 'cm') #вывод данных растояния
    sleep(1) #проспаться на 1 сек
